// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(USER)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  playlists     Playlist[]
  favorites     Favorite[]
  history       History[]
}

model Track {
  id            String    @id @default(uuid())
  title         String
  artist        String
  description   String?
  coverUrl      String
  audioUrl      String
  duration      String
  categoryId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category      Category  @relation(fields: [categoryId], references: [id])
  playlists     PlaylistTrack[]
  favorites     Favorite[]
  history       History[]
}

model Category {
  id            String    @id @default(uuid())
  title         String
  description   String?
  coverUrl      String
  slug          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tracks        Track[]
}

model Playlist {
  id            String    @id @default(uuid())
  title         String
  description   String?
  coverUrl      String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks        PlaylistTrack[]
}

model PlaylistTrack {
  id            String    @id @default(uuid())
  playlistId    String
  trackId       String
  addedAt       DateTime  @default(now())
  playlist      Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track         Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
}

model Favorite {
  id            String    @id @default(uuid())
  userId        String
  trackId       String
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  track         Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
}

model History {
  id            String    @id @default(uuid())
  userId        String
  trackId       String
  playedAt      DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  track         Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
}